{"title":"Developer Guide","markdown":{"yaml":{"title":"Developer Guide","description":"Technical documentation for developers contributing to the RED-X Shiny application."},"headingText":"1.0 Project Structure","containsRefs":false,"markdown":"\n\n\nThe RED-X application is organized to promote clarity, modularity, and collaboration. Below is a detailed breakdown of the file structure along with explanations of what each directory and file is responsible for.\n\n```text\nRED-X/\n├── CODE_OF_CONDUCT.md     # Contributor behavior guidelines\n├── LICENSE                # Open source license info\n├── README.md              # Overview and instructions\n├── RED-X.Rproj            # RStudio project file\n├── renv/                  # Dependency management via renv\n├── renv.lock              # Locked dependency versions\n├── app/                   # Core application folder\n│   ├── global.R           # Global settings and shared variables\n│   ├── server.R           # Server logic\n│   ├── UI.R               # Main UI structure\n│   ├── appData/           # Local SQLite database\n│   │   └── Explorer_cache.db           \n│   ├── appFunction/       # Custom function scripts\n│   │   └── dataExplorer_functions.R\n│   ├── appTabs/           # Modular UI tab definitions\n│   │   ├── aboutTab.R\n│   │   ├── datareviewTab.R\n│   │   ├── datareviewsubTab.R\n│   │   ├── datareviewsubTab1.R\n│   │   ├── homeTab.R\n│   │   ├── metadataTab.R\n│   │   ├── navmenuTab.R\n│   │   └── networkTab.R\n│   └── www/               # Static assets (images, logos)\n│       ├── adc logo.jpg\n│       ├── Agri-food.png\n│       ├── ...\n│       └── workshop1.jpeg\n├── docs/                  # Quarto-based documentation source\n│   ├── api.qmd\n│   ├── architecture.qmd\n│   ├── contributing.qmd\n│   ├── dev.qmd\n│   ├── getting-started.qmd\n│   ├── index.qmd\n│   ├── user-guide.qmd\n│   ├── _quarto.yml\n│   ├── styles.css\n│   ├── images/            # Diagrams and screenshots used in documentation\n│   │   ├── API_flow.png\n│   │   ├── data_exploration.png\n│   │   └── ...\n│   └── _site/             # Rendered HTML site output\n│       ├── index.html\n│       ├── api.html\n│       ├── ...\n│       └── site_libs/     # Quarto JS/CSS dependencies\n```\n\n\n#### 1.1 Repository Layout\n\n- The appTabs/ folder follows a modular UI design for maintainability. Each tab (e.g., Network, Metadata, About) is written in a separate script, which is then sourced into the main UI.\n- appFunction/ contains reusable logic like data cleaning or filtering functions.\n- Explorer_cache.db is auto-generated from API responses and stores cleaned metadata, keyword/author nodes, and network edges.\n- The www/ folder contains image assets used in the homepage carousel and other tabs.\n\n#### 1.2 Key Files and Scripts\n\n- UI.R & server.R – Main application UI and server logic\n- global.R – Global configuration, including shared resources\n- appFunction/ – Helper functions (e.g., data fetching, transformation)\n- appTabs/ – UI layout of individual tabs (e.g., Home, Network, Metadata)\n\n#### 1.3 Modular Design\n\nTabs are modularized into separate scripts for readability and reuse. Example:\n\n``` r\nsource(\"./app/appTabs/homeTab.R\")\n```\n\n### 2.0 Getting Started\n\n#### 2.1 Prerequisites\n\nEnsure the following software and system requirements are in place:\n\n- R version ≥ 4.2.0\n- RStudio (recommended IDE)\n- Git (for cloning the repository)\n- Internet access (required for API calls to Borealis)\n- Quarto (optional, for building documentation locally)\n- renv package (used to manage project-specific R dependencies)\n\nThe RED‑X app uses the renv package to isolate and restore specific R package versions. This helps ensure that collaborators and users can consistently reproduce the development environment across different systems. To learn more, see [Introduction to renv package](https://rstudio.github.io/renv/articles/renv.html).\n\n#### 2.2 Clone and Set Up the Project\n\n``` bash\n# Clone the repository\ngit clone https://github.com/agrifooddatacanada/OAC_Historical_Research_Data_Explorer_App.git\n\n# Navigate into the project directory\ncd OAC_Historical_Research_Data_Explorer_App\n```\nOpen the RED-X app as a project in the app directory in RStudio. Read more about [using R studio project here](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects).\n\n#### 2.3 Restoring Project Dependencies in RStudio\n\nRun the following in the R console to restore dependencies:\n\n```r\n\n# install.packages(\"renv\") if not already installed\ninstall.packages(\"renv\")\n\n# Once installed, project dependencies will be restored automatically from renv.lock when you run:\nrenv::restore()\n\n```\nLearn more about [Why renv matters for reproducibility here](https://agrifooddatacanada.ca/ensuring-code-consistency-and-reproducibility-with-r-projects-and-renv/).\n\n#### 2.4 Running the App Locally\n\nTo launch the RED-X app from your R console:\n\n```r\n# Run the Shiny app\nshiny::runApp(\"./app\")\n```\nThis will open the app in your default web browser. You may need to wait a few seconds for data to load from the local SQLite database (Explorer_cache.db).\n\n### 3.0 API Integration\n\nRED-X connects to the Borealis Dataverse API to fetch research datasets, metadata, and related files. All API calls are secured using a token stored in your environment variables.\n\n```r\nSys.getenv(\"API_TOKEN\")\n```\n> Never hardcode your API token in scripts or share it publicly. Access levels may vary depending on your Dataverse role (e.g., contributor, superuser).\n\n**Key Functions**\nfetch_all_datasets() – Recursively retrieves datasets and structures metadata layers\nfetch_study_details() – Fetches metadata using DOIs\naccess_data() – Downloads files associated with each dataset\n\n> View detailed [API guide here](api.qmd)\n\n### 4.0 Database and Data Handling\n\nRED-X uses a local SQLite database (Explorer_cache.db) to store processed research data for fast retrieval and offline access. This approach ensures efficient rendering of network visualizations, metadata tables, and search results, even with large datasets.\n\n#### 4.1 Data Flow\n\n##### 1. Initial Fetch\nOn first run (or every 48 hours), RED-X uses fetch_all_datasets() and fetch_study_details() to pull fresh data via the Dataverse API.\n\n##### 2. Transformation & Cleaning\nThe raw metadata is cleaned (e.g., standardizing author/keyword formatting) and structured into consistent formats.\n\n##### 3. Storage\nCleaned data is cached in Explorer_cache.db using the DBI and RSQLite packages. This includes:\n\n- Main study metadata (research_data)\n- Nodes and edges for keywords and authors\n- Update timestamp (update_info)\n\n> See the [Database Schemas](RED-X_Research_data_OCA_schema.md) under the Developer Guide for table details and structure.\n\n##### 4. Automatic Updates\nEvery 48 hours, the system checks for new or modified DOIs and appends only new records—preserving performance and avoiding duplication.\n\n```r\n# Check cache timestamp\nif (time_since_last_update > 48 hours) {\n  fetch new DOIs\n  update SQLite cache\n}\n```\n\n### 5.0 UI and UX Design\n\nThe RED-X Shiny application offers an intuitive and modular interface designed to support exploratory data analysis and metadata review workflows.\n\n#### 5.1 Layout\n\nRED-X features a navbar layout, optimized for navigation and accessibility across different data views.\n\n- Navbar provides quick access to key tabs\n- UI elements are dynamically shown or hidden based on user actions and login status\n\nEach tab supports interactivity, such as dynamic filtering, visualizations, and drill-down views.\n\n#### 5.2 Modules\n\nThe UI is modularized into separate R scripts housed in appTabs/. Each tab is structured as a self-contained Shiny UI component.\n\n**Available Tabs:**\n\n- Home Introduces the app, offers key statistics, and links to explore data.\n- Network Explorer Interactive visualization of co-occurrence networks for keywords or authors with filtering by college/department.\n- Data Explorer Displays study-level metadata and allows keyword/DOI search with optional download links for associated files.\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-after-body":["zoom.js"],"number-sections":false,"css":["styles.css"],"toc":true,"toc-depth":5,"output-file":"dev.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.36","theme":{"light":"flatly","dark":"darkly"},"toc-title":"On this page","title":"Developer Guide","description":"Technical documentation for developers contributing to the RED-X Shiny application."},"extensions":{"book":{"multiFile":true}}}}}