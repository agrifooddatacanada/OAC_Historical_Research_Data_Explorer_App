---
title: "API Guide"
description: "Detailed explanation of how RED-X interacts with the Borealis Dataverse API, including authentication, data fetching, and integration processes." 
---

![](images/API_flow.png){width=80%}

### 1.0 **API Token**
To access the Borealis Dataverse API, RED-X uses a secure API token that is user-specific. This token is stored safely using R's system environment variables and never hard coded in the script. This helps protect the token from unauthorized access.

```r
Api_token <- Sys.getenv("API_TOKEN") # Retrieve the API token from environment variables

```
> The API token is expected to be stored in your system environment (e.g., .Renviron file). This ensures sensitive credentials are encrypted and hidden from the codebase.

**Access Levels**
  
  - Public users (without an API token) can only access openly available datasets.
  - Authenticated users with an API token may access restricted datasets depending on their permissions.
  - Super users (e.g., developers or internal collaborators) may edit the .Renviron file or project settings to include a higher-level API token to unlock more datasets.

If you are a developer or contributor with elevated access, you can add your token to your environment like so:

```r
# In .Renviron (do not share publicly!)
API_TOKEN=your-personal-token-here

```
> Never share your API token publicly or hardcode it into your project files.

### 2.0 **API Calls**

The app uses a recursive function to explore dataverses and extract dataset metadata. The first step involves calling the API to recursively retrieve all datasets from all sub-dataverses in the repository:

```r
fetch_all_datasets <- function(id, layer_titles = character()) {
  base_url <- "https://borealisdata.ca/api/dataverses/"
  ...
}
```
This function calls the following endpoint:

```r
https://borealisdata.ca/api/dataverses/{dataverse_id}/contents
```
which returns a list of datasets and nested dataverses. Each dataset is parsed and assigned metadata such as:

- College (e.g., Ontario Agricultural College)
- Department (e.g., Plant Agriculture)
- Persistent DOI
- Hierarchical structure of the repository

Each dataverse is traversed recursively to capture all nested content.

### 3.0 **Fetching Metadata and Study Details**

Using the persistentId of each dataset, metadata is extracted in schema.org format and the following endpoints:

```r
"https://borealisdata.ca/api/datasets/export?exporter=schema.org&persistentId={DOI}"
```
This request returns structured metadata in Schema.org JSON format, including:
- Study Title
- Publication Date
- Authors & affiliations
- Keywords
- Study Objectives
- Spatial & temporal coverage
- College and Department Name
- Citation Info
- Funding source
- License & DOI
- File Listings

The result is parsed and stored as a tibble for downstream processing

### 4.0 **Downloading metadata and data Files**

When needed, data files are downloaded directly via this endpoint:

```r
https://borealisdata.ca/api/access/dataset/:persistentId/?persistentId={DOI}
```

Downloaded ZIP archives are unzipped and filtered for:
- .csv or .tab files (raw data)
- README.txt files (metadata)
Only supported file formats are used in the app and are filtered using the function below;

```r
filter_filelist(file_list, is_txt = TRUE)  # Get README.txt files
filter_filelist(file_list, is_txt = FALSE) # Get .csv/.tab files
```
